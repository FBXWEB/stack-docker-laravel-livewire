#########################################################################################################
## FBXWEB - AGÊNCIA CRIATIVA @ 2023                                                                    ##
## Arquivo de construção do Docker Container                                                           ##
## Altere o arquivo .docker/.config-docker                                                             ##
## - Não existe necessidade de alterar esse arquivo                                                    ##
##
## COMANDOS PARA EXECUTAR:
## SUBIR OS CONTAINERS:
## docker compose --env-file .docker/.config-docker up -d --build
##
## Ver status / logs:
## docker compose --env-file .docker/.config-docker ps
## docker compose --env-file .docker/.config-docker logs -f db (escolha um service)
## 
## Derrubar/down Container: 
## docker compose --env-file .docker/.config-docker down
##
## 
#########################################################################################################

version: '3.8'

networks:
  app-network:

volumes:
  app-data:

services:
  webserver:
    image: nginx:1.21.6-alpine
    container_name: ${STACK}_webserver
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443" # Adiciona suporte à porta HTTPS
    volumes:
      - ./:/var/www
      - .docker/nginx:/etc/nginx/conf.d
      # Monta o certificado SSL
      #ex: - .docker/php/localhost+2.pem:/etc/ssl/certs/localhost.pem 
      # Monta a chave do certificado
      #ex: - .docker/php/localhost+2-key.pem:/etc/ssl/private/localhost.key 
      - ${SSL_CERT_PATH:-/dev/null}:/etc/ssl/certs/localhost.pem
      - ${SSL_KEY_PATH:-/dev/null}:/etc/ssl/private/localhost.key
    environment:
      USE_SSL: "${USE_SSL}"
    networks:
      - app-network

  backend:
    build:
      context: .docker/php
      dockerfile: Dockerfile
    container_name: ${STACK}_backend
    volumes:
      - ./:/var/www
      - .docker/php/php.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  db:
    image: mysql:8.0
    container_name: ${STACK}_db
    restart: unless-stopped
    command: ["--default-authentication-plugin=mysql_native_password"]
    environment:
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    volumes:
      - app-data:/var/lib/mysql
      - ./.docker/mysql/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-p${MYSQL_ROOT_PASSWORD}"]
      interval: 5s
      timeout: 3s
      retries: 20

  phpmyadmin:
    image: phpmyadmin/phpmyadmin
    container_name: ${STACK}_phpmyadmin
    restart: unless-stopped
    ports:
      - "${PMA_PORT}:80"
    environment:
      PMA_HOST: db
      PMA_USER: ${MYSQL_USER}
      PMA_PASSWORD: ${MYSQL_PASSWORD}
    networks:
      - app-network
    depends_on:
      db:
        condition: service_healthy

  mailhog:
    image: mailhog/mailhog:latest
    container_name: ${STACK}_mailhog
    restart: always
    ports:
      - "${MAILHOG_SMTP}:1025"
      - "${MAILHOG_UI}:8025"
    volumes:
      - ./.docker/mailhog-data:/data
    networks:
      - app-network

  ultrahook:
    build:
      context: .docker/ultrahook
      dockerfile: Ultrahook
    container_name: ${STACK}_ultrahook
    restart: unless-stopped
    environment:
      ULTRAHOOK_API_KEY: "${ULTRAHOOK_API_KEY}" #"2ZH3sMng3gsPBjHvhitS0GJw2W3bbWDL"
    networks:
      - app-network